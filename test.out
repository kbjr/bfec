Schema {
  imports: [
    Import {
      type: 'import',
      ast_node: [DeclareFromNode],
      comments: [],
      source: [ConstString]
    }
  ],
  imported_refs: [
    ImportedRef {
      type: 'imported_ref',
      ast_node: [FromImportNode],
      from: [Import]
    }
  ],
  structs: [
    NamedStruct {
      type: 'struct',
      symbols: [Map],
      struct_type: 'named',
      ast_node: [DeclareStructNode],
      comments: [Array],
      fields: [Array]
    },
    NamedStruct {
      type: 'struct',
      symbols: [Map],
      struct_type: 'named',
      ast_node: [DeclareStructNode],
      comments: [],
      fields: [Array]
    },
    NamedStruct {
      type: 'struct',
      symbols: [Map],
      struct_type: 'named',
      ast_node: [DeclareStructNode],
      comments: [],
      fields: [Array]
    },
    NamedStruct {
      type: 'struct',
      symbols: [Map],
      struct_type: 'named',
      ast_node: [DeclareStructNode],
      comments: [],
      fields: [Array]
    },
    NamedStruct {
      type: 'struct',
      symbols: [Map],
      struct_type: 'named',
      ast_node: [DeclareStructNode],
      comments: [],
      fields: [Array]
    },
    NamedStruct {
      type: 'struct',
      symbols: [Map],
      struct_type: 'named',
      ast_node: [DeclareStructNode],
      comments: [],
      fields: [Array]
    },
    NamedStruct {
      type: 'struct',
      symbols: [Map],
      struct_type: 'named',
      ast_node: [DeclareStructNode],
      comments: [],
      fields: [Array]
    },
    NamedStruct {
      type: 'struct',
      symbols: [Map],
      struct_type: 'named',
      ast_node: [DeclareStructNode],
      comments: [],
      fields: [Array]
    },
    NamedStruct {
      type: 'struct',
      symbols: [Map],
      struct_type: 'named',
      ast_node: [DeclareStructNode],
      comments: [],
      fields: [Array]
    },
    NamedStruct {
      type: 'struct',
      symbols: [Map],
      struct_type: 'named',
      ast_node: [DeclareStructNode],
      comments: [],
      fields: [Array]
    },
    NamedStruct {
      type: 'struct',
      symbols: [Map],
      struct_type: 'named',
      ast_node: [DeclareStructNode],
      comments: [],
      fields: [Array]
    },
    NamedStruct {
      type: 'struct',
      symbols: [Map],
      struct_type: 'named',
      ast_node: [DeclareStructNode],
      comments: [],
      fields: [Array]
    },
    NamedStruct {
      type: 'struct',
      symbols: [Map],
      struct_type: 'named',
      ast_node: [DeclareStructNode],
      comments: [],
      fields: [Array]
    },
    NamedStruct {
      type: 'struct',
      symbols: [Map],
      struct_type: 'named',
      ast_node: [DeclareStructNode],
      comments: [],
      fields: [Array]
    },
    NamedStruct {
      type: 'struct',
      symbols: [Map],
      struct_type: 'named',
      ast_node: [DeclareStructNode],
      comments: [],
      fields: [Array]
    },
    NamedStruct {
      type: 'struct',
      symbols: [Map],
      struct_type: 'named',
      ast_node: [DeclareStructNode],
      comments: [],
      fields: [Array]
    },
    NamedStruct {
      type: 'struct',
      symbols: [Map],
      struct_type: 'named',
      ast_node: [DeclareStructNode],
      comments: [],
      fields: [Array]
    },
    NamedStruct {
      type: 'struct',
      symbols: [Map],
      struct_type: 'named',
      ast_node: [DeclareStructNode],
      comments: [],
      fields: [Array]
    },
    NamedStruct {
      type: 'struct',
      symbols: [Map],
      struct_type: 'named',
      ast_node: [DeclareStructNode],
      comments: [],
      fields: [Array]
    },
    NamedStruct {
      type: 'struct',
      symbols: [Map],
      struct_type: 'named',
      ast_node: [DeclareStructNode],
      comments: [],
      fields: [Array]
    },
    NamedStruct {
      type: 'struct',
      symbols: [Map],
      struct_type: 'named',
      ast_node: [DeclareStructNode],
      comments: [],
      fields: [Array]
    },
    NamedStruct {
      type: 'struct',
      symbols: [Map],
      struct_type: 'named',
      ast_node: [DeclareStructNode],
      comments: [],
      fields: [Array]
    },
    NamedStruct {
      type: 'struct',
      symbols: [Map],
      struct_type: 'named',
      ast_node: [DeclareStructNode],
      comments: [],
      fields: [Array]
    },
    NamedStruct {
      type: 'struct',
      symbols: [Map],
      struct_type: 'named',
      ast_node: [DeclareStructNode],
      comments: [],
      fields: [Array]
    },
    NamedStruct {
      type: 'struct',
      symbols: [Map],
      struct_type: 'named',
      ast_node: [DeclareStructNode],
      comments: [],
      fields: [Array]
    }
  ],
  switches: [
    NamedSwitch {
      type: 'switch',
      case_map: [Map],
      switch_type: 'named',
      ast_node: [DeclareSwitchNode],
      comments: [],
      cases: [Array],
      default: [SwitchDefault]
    },
    NamedSwitch {
      type: 'switch',
      case_map: [Map],
      switch_type: 'named',
      ast_node: [DeclareSwitchNode],
      comments: [],
      cases: [Array],
      default: [SwitchDefault]
    },
    NamedSwitch {
      type: 'switch',
      case_map: [Map],
      switch_type: 'named',
      ast_node: [DeclareSwitchNode],
      comments: [],
      cases: [Array],
      default: [SwitchDefault]
    },
    NamedSwitch {
      type: 'switch',
      case_map: [Map],
      switch_type: 'named',
      ast_node: [DeclareSwitchNode],
      comments: [],
      cases: [Array]
    },
    NamedSwitch {
      type: 'switch',
      case_map: [Map],
      switch_type: 'named',
      ast_node: [DeclareSwitchNode],
      comments: [],
      cases: [Array],
      default: [SwitchDefault]
    },
    NamedSwitch {
      type: 'switch',
      case_map: [Map],
      switch_type: 'named',
      ast_node: [DeclareSwitchNode],
      comments: [],
      cases: [Array],
      default: [SwitchDefault]
    }
  ],
  enums: [
    Enum {
      type: 'enum',
      symbols: [Map],
      ast_node: [DeclareEnumNode],
      comments: [],
      members: [Array]
    },
    Enum {
      type: 'enum',
      symbols: [Map],
      ast_node: [DeclareEnumNode],
      comments: [],
      members: [Array]
    },
    Enum {
      type: 'enum',
      symbols: [Map],
      ast_node: [DeclareEnumNode],
      comments: [],
      members: [Array]
    },
    Enum {
      type: 'enum',
      symbols: [Map],
      ast_node: [DeclareEnumNode],
      comments: [],
      members: [Array]
    },
    Enum {
      type: 'enum',
      symbols: [Map],
      ast_node: [DeclareEnumNode],
      comments: [],
      members: [Array]
    },
    Enum {
      type: 'enum',
      symbols: [Map],
      ast_node: [DeclareEnumNode],
      comments: [],
      members: [Array]
    },
    Enum {
      type: 'enum',
      symbols: [Map],
      ast_node: [DeclareEnumNode],
      comments: [],
      members: [Array]
    },
    Enum {
      type: 'enum',
      symbols: [Map],
      ast_node: [DeclareEnumNode],
      comments: [],
      members: [Array]
    },
    Enum {
      type: 'enum',
      symbols: [Map],
      ast_node: [DeclareEnumNode],
      comments: [],
      members: [Array]
    }
  ],
  symbols: Map {
    'bool' => ImportedRef {
      type: 'imported_ref',
      ast_node: [FromImportNode],
      from: [Import]
    },
    '$' => NamedStruct {
      type: 'struct',
      symbols: [Map],
      struct_type: 'named',
      ast_node: [DeclareStructNode],
      comments: [Array],
      fields: [Array]
    },
    'Chunk' => NamedStruct {
      type: 'struct',
      symbols: [Map],
      struct_type: 'named',
      ast_node: [DeclareStructNode],
      comments: [],
      fields: [Array]
    },
    'ChunkType' => Enum {
      type: 'enum',
      symbols: [Map],
      ast_node: [DeclareEnumNode],
      comments: [],
      members: [Array]
    },
    'ChunkData' => NamedSwitch {
      type: 'switch',
      case_map: [Map],
      switch_type: 'named',
      ast_node: [DeclareSwitchNode],
      comments: [],
      cases: [Array],
      default: [SwitchDefault]
    },
    'BitDepth' => Enum {
      type: 'enum',
      symbols: [Map],
      ast_node: [DeclareEnumNode],
      comments: [],
      members: [Array]
    },
    'CompressionMethod' => Enum {
      type: 'enum',
      symbols: [Map],
      ast_node: [DeclareEnumNode],
      comments: [],
      members: [Array]
    },
    'FilterMethod' => Enum {
      type: 'enum',
      symbols: [Map],
      ast_node: [DeclareEnumNode],
      comments: [],
      members: [Array]
    },
    'InterlaceMethod' => Enum {
      type: 'enum',
      symbols: [Map],
      ast_node: [DeclareEnumNode],
      comments: [],
      members: [Array]
    },
    'ImageHeader' => NamedStruct {
      type: 'struct',
      symbols: [Map],
      struct_type: 'named',
      ast_node: [DeclareStructNode],
      comments: [],
      fields: [Array]
    },
    'ColorType' => Enum {
      type: 'enum',
      symbols: [Map],
      ast_node: [DeclareEnumNode],
      comments: [],
      members: [Array]
    },
    'Pallete' => NamedStruct {
      type: 'struct',
      symbols: [Map],
      struct_type: 'named',
      ast_node: [DeclareStructNode],
      comments: [],
      fields: [Array]
    },
    'TransparencyData' => NamedSwitch {
      type: 'switch',
      case_map: [Map],
      switch_type: 'named',
      ast_node: [DeclareSwitchNode],
      comments: [],
      cases: [Array],
      default: [SwitchDefault]
    },
    'GreyscaleTransparencyData' => NamedStruct {
      type: 'struct',
      symbols: [Map],
      struct_type: 'named',
      ast_node: [DeclareStructNode],
      comments: [],
      fields: [Array]
    },
    'TruecolorTransparencyData' => NamedStruct {
      type: 'struct',
      symbols: [Map],
      struct_type: 'named',
      ast_node: [DeclareStructNode],
      comments: [],
      fields: [Array]
    },
    'IndexedColorTransparencyData' => NamedStruct {
      type: 'struct',
      symbols: [Map],
      struct_type: 'named',
      ast_node: [DeclareStructNode],
      comments: [],
      fields: [Array]
    },
    'PrimaryChromaticitiesAndWhitePointData' => NamedStruct {
      type: 'struct',
      symbols: [Map],
      struct_type: 'named',
      ast_node: [DeclareStructNode],
      comments: [],
      fields: [Array]
    },
    'GammaData' => NamedStruct {
      type: 'struct',
      symbols: [Map],
      struct_type: 'named',
      ast_node: [DeclareStructNode],
      comments: [],
      fields: [Array]
    },
    'EmbeddedICCProfileData' => NamedStruct {
      type: 'struct',
      symbols: [Map],
      struct_type: 'named',
      ast_node: [DeclareStructNode],
      comments: [],
      fields: [Array]
    },
    'SignifigantBitsData' => NamedSwitch {
      type: 'switch',
      case_map: [Map],
      switch_type: 'named',
      ast_node: [DeclareSwitchNode],
      comments: [],
      cases: [Array],
      default: [SwitchDefault]
    },
    'GreyscaleSignifigantBitsData' => NamedStruct {
      type: 'struct',
      symbols: [Map],
      struct_type: 'named',
      ast_node: [DeclareStructNode],
      comments: [],
      fields: [Array]
    },
    'ColorSignifigantBitsData' => NamedStruct {
      type: 'struct',
      symbols: [Map],
      struct_type: 'named',
      ast_node: [DeclareStructNode],
      comments: [],
      fields: [Array]
    },
    'RGBRenderingIntent' => Enum {
      type: 'enum',
      symbols: [Map],
      ast_node: [DeclareEnumNode],
      comments: [],
      members: [Array]
    },
    'RGBColorSpaceData' => NamedStruct {
      type: 'struct',
      symbols: [Map],
      struct_type: 'named',
      ast_node: [DeclareStructNode],
      comments: [],
      fields: [Array]
    },
    'TextData' => NamedStruct {
      type: 'struct',
      symbols: [Map],
      struct_type: 'named',
      ast_node: [DeclareStructNode],
      comments: [],
      fields: [Array]
    },
    'CompressedTextData' => NamedStruct {
      type: 'struct',
      symbols: [Map],
      struct_type: 'named',
      ast_node: [DeclareStructNode],
      comments: [],
      fields: [Array]
    },
    'InternationalTextDataBody' => NamedSwitch {
      type: 'switch',
      case_map: [Map],
      switch_type: 'named',
      ast_node: [DeclareSwitchNode],
      comments: [],
      cases: [Array]
    },
    'InternationalTextData' => NamedStruct {
      type: 'struct',
      symbols: [Map],
      struct_type: 'named',
      ast_node: [DeclareStructNode],
      comments: [],
      fields: [Array]
    },
    'BackgroundColorData' => NamedSwitch {
      type: 'switch',
      case_map: [Map],
      switch_type: 'named',
      ast_node: [DeclareSwitchNode],
      comments: [],
      cases: [Array],
      default: [SwitchDefault]
    },
    'GreyscaleBackgroundData' => NamedStruct {
      type: 'struct',
      symbols: [Map],
      struct_type: 'named',
      ast_node: [DeclareStructNode],
      comments: [],
      fields: [Array]
    },
    'TruecolorBackgroundData' => NamedStruct {
      type: 'struct',
      symbols: [Map],
      struct_type: 'named',
      ast_node: [DeclareStructNode],
      comments: [],
      fields: [Array]
    },
    'IndexedColorBackgroundData' => NamedStruct {
      type: 'struct',
      symbols: [Map],
      struct_type: 'named',
      ast_node: [DeclareStructNode],
      comments: [],
      fields: [Array]
    },
    'ImageHistogramData' => NamedStruct {
      type: 'struct',
      symbols: [Map],
      struct_type: 'named',
      ast_node: [DeclareStructNode],
      comments: [],
      fields: [Array]
    },
    'PixelDimensionUnit' => Enum {
      type: 'enum',
      symbols: [Map],
      ast_node: [DeclareEnumNode],
      comments: [],
      members: [Array]
    },
    'PhysicalPixelDimensionsData' => NamedStruct {
      type: 'struct',
      symbols: [Map],
      struct_type: 'named',
      ast_node: [DeclareStructNode],
      comments: [],
      fields: [Array]
    },
    'SampleDepth' => Enum {
      type: 'enum',
      symbols: [Map],
      ast_node: [DeclareEnumNode],
      comments: [],
      members: [Array]
    },
    'Sample8Bit' => NamedStruct {
      type: 'struct',
      symbols: [Map],
      struct_type: 'named',
      ast_node: [DeclareStructNode],
      comments: [],
      fields: [Array]
    },
    'Sample16Bit' => NamedStruct {
      type: 'struct',
      symbols: [Map],
      struct_type: 'named',
      ast_node: [DeclareStructNode],
      comments: [],
      fields: [Array]
    },
    'Sample' => NamedSwitch {
      type: 'switch',
      case_map: [Map],
      switch_type: 'named',
      ast_node: [DeclareSwitchNode],
      comments: [],
      cases: [Array],
      default: [SwitchDefault]
    },
    'SuggestedPalleteData' => NamedStruct {
      type: 'struct',
      symbols: [Map],
      struct_type: 'named',
      ast_node: [DeclareStructNode],
      comments: [],
      fields: [Array]
    },
    'LastModifiedTimestampData' => NamedStruct {
      type: 'struct',
      symbols: [Map],
      struct_type: 'named',
      ast_node: [DeclareStructNode],
      comments: [],
      fields: [Array]
    }
  },
  is_external: false,
  is_remote: false,
  source: FileNode {
    source: '~/png.bfec',
    source_contents: [
      '',
      "from '~/basics.bfec' { bool };",
      '',
      '#--',
      'PNG Image Format',
      '',
      'https://www.w3.org/TR/PNG',
      '#--',
      'struct $ {',
      '  magic_number: "\\x89\\x50\\x4e\\x47\\x0d\\x0a\\x1a\\x0a";',
      '  header: Chunk(ChunkType.IHDR);',
      '  chunks: Chunk[...];',
      '}',
      '',
      'struct Chunk (type: ChunkType) {',
      '  length: len<u32_be>;',
      '  type: ChunkType = type;',
      '  data: u8[@.length] -> ChunkData(type);',
      "  crc: checksum<u32_be>(@.data, 'crc32');",
      '}',
      '',
      'enum ChunkType: ascii<4> {',
      '  IHDR = "IHDR";',
      '  PLTE = "PLTE";',
      '  IDAT = "IDAT";',
      '  IEND = "IEND";',
      '  tRNS = "tRNS";',
      '  cHRM = "cHRM";',
      '  gAMA = "gAMA";',
      '  iCCP = "iCCP";',
      '  sBIT = "sBIT";',
      '  sRGB = "sRGB";',
      '  tEXt = "tEXt";',
      '  xTXt = "xTXt";',
      '  iTXt = "iTXt";',
      '  bKGD = "bKGD";',
      '  hIST = "hIST";',
      '  pHYs = "pHYs";',
      '  sPLT = "sPLT";',
      '  tIME = "tIME";',
      '}',
      '',
      'switch ChunkData<ChunkType> {',
      '  case IHDR: ImageHeader;',
      '  case PLTE: Pallete[...];',
      '  case IDAT: void;',
      '  case IEND: void;',
      '  case tRNS: TransparencyData($.header.data.color_type);',
      '  case cHRM: PrimaryChromaticitiesAndWhitePointData;',
      '  case gAMA: GammaData;',
      '  case iCCP: EmbeddedICCProfileData;',
      '  case sBIT: SignifigantBitsData($.header.data.color_type);',
      '  case sRGB: RGBColorSpaceData;',
      '  case tEXt: TextData;',
      '  case xTXt: CompressedTextData;',
      '  case iTXt: InternationalTextData;',
      '  case bKGD: BackgroundColorData($.header.data.color_type);',
      '  case hIST: ImageHistogramData;',
      '  case pHYs: PhysicalPixelDimensionsData;',
      '  case sPLT: SuggestedPalleteData;',
      '  case tIME: LastModifiedTimestampData;',
      '  default: void;',
      '}',
      '',
      'enum BitDepth: u8 {',
      '  b1  = 1;',
      '  b2  = 2;',
      '  b4  = 4;',
      '  b8  = 8;',
      '  b16 = 16;',
      '}',
      '',
      'enum CompressionMethod: u8 {',
      '  zlib = 0;',
      '}',
      '',
      'enum FilterMethod: u8 {',
      '  adaptive = 0;',
      '}',
      '',
      'enum InterlaceMethod: u8 {',
      '  no_interlace    = 0;',
      '  adam7_interlace = 1;',
      '}',
      '',
      'struct ImageHeader {',
      '  width: u32_be;',
      '  height: u32_be;',
      '  bit_depth: BitDepth;',
      '  color_type: ColorType;',
      '  compression_method: CompressionMethod;',
      '  filter_method: FilterMethod;',
      '  interlace_method: InterlaceMethod;',
      '}',
      '',
      'enum ColorType: u8 {',
      '  greyscale            = 0;',
      '  truecolor            = 2;',
      '  indexed_color        = 3;',
      '  greyscale_with_alpha = 4;',
      ... 188 more items
    ],
    type: 0,
    children: [
      [DeclareFromNode],   [BlockCommentToken],
      [DeclareStructNode], [DeclareStructNode],
      [DeclareEnumNode],   [DeclareSwitchNode],
      [DeclareEnumNode],   [DeclareEnumNode],
      [DeclareEnumNode],   [DeclareEnumNode],
      [DeclareStructNode], [DeclareEnumNode],
      [DeclareStructNode], [DeclareSwitchNode],
      [DeclareStructNode], [DeclareStructNode],
      [DeclareStructNode], [DeclareStructNode],
      [DeclareStructNode], [DeclareStructNode],
      [DeclareSwitchNode], [DeclareStructNode],
      [DeclareStructNode], [DeclareEnumNode],
      [DeclareStructNode], [DeclareStructNode],
      [DeclareStructNode], [DeclareSwitchNode],
      [DeclareStructNode], [DeclareSwitchNode],
      [DeclareStructNode], [DeclareStructNode],
      [DeclareStructNode], [DeclareStructNode],
      [DeclareEnumNode],   [DeclareStructNode],
      [DeclareEnumNode],   [DeclareStructNode],
      [DeclareStructNode], [DeclareSwitchNode],
      [DeclareStructNode], [DeclareStructNode]
    ]
  },
  root_schema: undefined
}
