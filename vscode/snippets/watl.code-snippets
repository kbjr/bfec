{
	"Declare Namespace": {
		"prefix": "namespace",
		"body": [
			"${1:private} namespace ${2:namespace_name} {",
			"\t$TM_SELECTED_TEXT$0",
			"}"
		],
		"description": "Declare Namespace"
	},
	"Declare Friend Namespace": {
		"prefix": "friend",
		"body": [
			"friend namespace ${1:friend_name};"
		],
		"description": "Declare Friend Namespace"
	},
	"Declare Friend Function": {
		"prefix": "friend",
		"body": [
			"friend function ${1:friend_name};"
		],
		"description": "Declare Friend Function"
	},
	"Declare Friend Class": {
		"prefix": "friend",
		"body": [
			"friend class ${1:FriendName};"
		],
		"description": "Declare Friend Class"
	},
	"Declare Function": {
		"prefix": "function",
		"body": [
			"${1:private} function ${2:function_name}(${3:parameters}) : ${4:return_type} {",
			"\t$TM_SELECTED_TEXT$0",
			"}"
		],
		"description": "Declare Function"
	},
	"Declare WASM Function": {
		"prefix": "wasm",
		"body": [
			"${1:private} wasm function ${2:function_name}(${3:parameters}) : ${4:return_type} {",
			"\t(param ${5:wasm_parameters})",
			"\t(result ${6:wasm_result})",
			"\t$TM_SELECTED_TEXT$0",
			"}"
		],
		"description": "Declare WASM Function"
	},
	"Declare Abstract Function": {
		"prefix": "function",
		"body": [
			"${1:private} abstract function ${2:function_name}(${3:parameters}) : ${4:return_type};$0"
		],
		"description": "Declare Abstract Function"
	},
	"Declare Extern Function": {
		"prefix": "function",
		"body": [
			"function ${1:function_name}(${2:parameters}) : ${3:return_type},$0"
		],
		"description": "Declare Extern Function"
	},
	// "Declare Operator": { },
	// "Declare WASM Operator": { },
	// "Declare Abstract Operator": { },
	"Declare From": {
		"prefix": "from",
		"body": [
			"${1:private} from ${2:\"source\"} ${3:imported};$0"
		],
		"description": "Declare From"
	},
	"Declare Struct": {
		"prefix": "struct",
		"body": [
			"${1:private} struct ${2:StructName} {",
			"\t$TM_SELECTED_TEXT$0",
			"}"
		],
		"description": "Declare Struct"
	},
	"Declare Type Alias": {
		"prefix": "type",
		"body": [
			"${1:private} type ${1:AliasName} = ${2:type_expr};$0"
		],
		"description": "Declare Type Alias"
	},
	"Declare Type Primitive": {
		"prefix": "type",
		"body": [
			"${1:private} type ${2:type_name}: ${3:parent_type_expr} {",
			"\t$TM_SELECTED_TEXT$0",
			"}"
		],
		"description": "Declare Type Primitive"
	},
	"Declare Constant": {
		"prefix": "const",
		"body": [
			"${1:private} const ${2:constant_name} : ${3:type} = ${4:value_expr};$0"
		],
		"description": "Declare Constant"
	},
	"Declare Variable": {
		"prefix": "const",
		"body": [
			"${1:private} let ${2:variable_name} : ${3:type} = ${4:value_expr};$0"
		],
		"description": "Declare Variable"
	},
	"Declare Enum": {
		"prefix": "enum",
		"body": [
			"${1:private} enum ${2:EnumName}: ${3:element_type_expr} {",
			"\t$TM_SELECTED_TEXT$0",
			"}"
		],
		"description": "Declare Enum"
	},
	"Declare Trait": {
		"prefix": "trait",
		"body": [
			"${1:private} trait ${2:TraitName} : ${3:T} {",
			"\t$TM_SELECTED_TEXT$0",
			"}"
		],
		"description": "Declare Trait"
	},
	"Declare Trait Implementation": {
		"prefix": "implement",
		"body": [
			"implement trait ${1:TraitName} for ${2:TypeExpr} {",
			"\t$TM_SELECTED_TEXT$0",
			"}"
		],
		"description": "Declare Trait Implementation"
	},
	"Declare Behavior Implementation": {
		"prefix": "behavior",
		"body": [
			"implement behavior ${1:behavior_name} for ${2:TypeExpr} {",
			"\t$TM_SELECTED_TEXT$0",
			"}"
		],
		"description": "Declare Behavior Implmentation"
	},
	"Declare For-In Behavior Implementation": {
		"prefix": "behavior",
		"body": [
			"implement behavior for_in<${1:ElemType}> for ${2:TypeExpr} {",
			"\tpublic inline function next() : T {",
			"\t\t// Step forward, returning the next item in the iteration",
			"\t\treturn ${3:next_item_in_list};",
			"\t}",
			"\t",
			"\tpublic inline function check() : bool {",
			"\t\t// Check if there are remaining elements to iterate",
			"\t\treturn ${4:false};",
			"\t}",
			"\t",
			"\tpublic inline function after() : void {",
			"\t\t// Do any cleanup after we finish iterating",
			"\t}",
			"}"
		],
		"description": "Declare For-In Behavior Implmentation"
	},
	// "Declare Class": { },
	"Do Statement": {
		"prefix": "do",
		"body": [
			"do {",
			"\t$TM_SELECTED_TEXT$0",
			"}"
		],
		"description": "Do Statement"
	},
	"Unsafe Statement": {
		"prefix": "unsafe",
		"body": [
			"unsafe {",
			"\t$TM_SELECTED_TEXT$0",
			"}"
		],
		"description": "Unsafe Statement"
	},
	"Loop Statement": {
		"prefix": "loop",
		"body": [
			"loop {",
			"\t$TM_SELECTED_TEXT$0",
			"}"
		],
		"description": "If Statement"
	},
	"If Statement": {
		"prefix": "if",
		"body": [
			"if (${1:condition_expr}) {",
			"\t$TM_SELECTED_TEXT$0",
			"}"
		],
		"description": "If Statement"
	},
	"Unless Statement": {
		"prefix": "unless",
		"body": [
			"unless (${1:condition_expr}) {",
			"\t$TM_SELECTED_TEXT$0",
			"}"
		],
		"description": "Unless Statement"
	},
	"Else Statement": {
		"prefix": "else",
		"body": [
			"else {",
			"\t$TM_SELECTED_TEXT$0",
			"}"
		],
		"description": "else Statement"
	},
	"Else-If Statement": {
		"prefix": "else",
		"body": [
			"else if (${1:condition_expr}) {",
			"\t$TM_SELECTED_TEXT$0",
			"}"
		],
		"description": "Else-If Statement"
	},
	"Else-Unless Statement": {
		"prefix": "else",
		"body": [
			"else unless (${1:condition_expr}) {",
			"\t$TM_SELECTED_TEXT$0",
			"}"
		],
		"description": "Else-Unless Statement"
	},
	"While Loop Statement": {
		"prefix": "while",
		"body": [
			"while (${1:condition_expr}) {",
			"\t$TM_SELECTED_TEXT$0",
			"}"
		],
		"description": "While Loop Statement"
	},
	"Until Loop Statement": {
		"prefix": "until",
		"body": [
			"until (${1:condition_expr}) {",
			"\t$TM_SELECTED_TEXT$0",
			"}"
		],
		"description": "Until Loop Statement"
	},
	"For-In Loop Statement": {
		"prefix": "for",
		"body": [
			"for (const ${1:item}: ${2:type} in ${3:iterable}) {",
			"\t$TM_SELECTED_TEXT$0",
			"}"
		],
		"description": "For-In Loop Statement"
	},
	"For Loop Statement": {
		"prefix": "for",
		"body": [
			"for (let ${1:index} = 0; $1 < ${2:length}; $1++) {",
			"\t$TM_SELECTED_TEXT$0",
			"}"
		],
		"description": "For Loop Statement"
	},
	"Switch Statement": {
		"prefix": "switch",
		"body": [
			"switch (${1:condition_expr}) {",
			"\tcase ${2:case_expr}:",
			"\t\t$0",
			"\t\tbreak;",
			"}"
		],
		"description": "Switch Statement"
	},
	"Type Switch Statement": {
		"prefix": "switch",
		"body": [
			"switch <${1:condition_type_expr}> {",
			"\tcase ${2:case_type_expr}:",
			"\t\t$0",
			"\t\tbreak;",
			"}"
		],
		"description": "Type Switch Statement"
	},
	"Case Statement": {
		"prefix": "case",
		"body": [
			"case ${1:case_expr}:",
			"\t$0",
			"\tbreak;",
		],
		"description": "Case Statement"
	},
	"Default Statement": {
		"prefix": "default",
		"body": [
			"default:",
			"\t$0",
			"\tbreak;",
		],
		"description": "Default Statement"
	},
	"Break Statement": {
		"prefix": "break",
		"body": [
			"break ${1:block_label};$0"
		],
		"description": "Break Statement"
	},
	"Continue Statement": {
		"prefix": "continue",
		"body": [
			"continue ${1:block_label};$0"
		],
		"description": "Continue Statement"
	},
	"Yield Statement": {
		"prefix": "yield",
		"body": [
			"yield ${1:yield_expr};$0"
		],
		"description": "Yield Statement"
	},
	"Throw Statement": {
		"prefix": "throw",
		"body": [
			"throw ${1:error_expr};$0"
		],
		"description": "Throw Statement"
	},
	"Return Statement": {
		"prefix": "return",
		"body": [
			"return ${1:return_expr};$0"
		],
		"description": "Return Statement"
	},
	"Unreachable Statement": {
		"prefix": "unreachable",
		"body": [
			"unreachable;$0"
		],
		"description": "Unreachable Statement"
	},
	"Entrypoint Annotation": {
		"prefix": "entrypoint",
		"body": [
			"#[entrypoint('${1:entrypoint_name}')]$0"
		],
		"description": "Entrypoint Annotation"
	},
	"Host Target Annotation": {
		"prefix": "host",
		"body": [
			"#[host('${1:host_name}')]$0"
		],
		"description": "Host Target Annotation"
	},
}