$schema: https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json
name: bfec
scopeName: source.bfec
patterns:
  - include: "#file_scope"
repository:
  comments:
    patterns:
      - name: comment.line.hash.bfec
        match: "#.*"
  
  identifier:
    match: \b[a-zA-Z_][a-zA-Z0-9_]*\b
    name: variable.name.bfec
  
  name_path:
    name: meta.expression.name-path.bfec
    match: >-
      (?x)\b(?:
        ([a-zA-Z_][a-zA-Z0-9_])\s*
        (\.|\?\.)\s*
      )*
      ([a-zA-Z_][a-zA-Z0-9_]*)
    captures:
      "1":
        name: entity.name.namespace.bfec
      "2":
        name: keyword.operator.property-access.bfec
      "3":
        name: entity.name.namespace.bfec
  
  constants:
    patterns:
      - name: constant.language.bool.bfec
        match: \b(true|false)\b
      - name: constant.language.null.bfec
        match: \bnull\b
      - name: constant.numeric.float-special.bfec
        match: \b(nan|infinity)\b
      - name: constant.numeric.float.bfec
        match: \b[0-9]+\.[0-9]+\b
      - name: constant.numeric.hex.bfec
        match: \b0x[0-9a-fA-Z]+\b
      - name: constant.numeric.integer.bfec
        match: \b[0-9]+\b
  
  charstring:
    name: string.quoted.double.bfec
    begin: '"'
    end: '"'
    beginCaptures:
      "0":
        name: punctuation.definition.string.begin
    endCaptures:
      "0":
        name: punctuation.definition.string.end
    patterns:
      - name: constant.character.escape.bfec
        match: \\(n|r|t|b|0|\\|"|x[0-9a-fA-F]{2})
  
  string:
    name: string.quoted.single.bfec
    begin: "'"
    end: "'"
    beginCaptures:
      "0":
        name: punctuation.definition.string.begin
    endCaptures:
      "0":
        name: punctuation.definition.string.end
    patterns:
      - name: constant.character.escape.bfec
        match: \\(n|r|t|b|0|\\|'|x[0-9a-fA-F]{2}|u\{[0-9a-fA-F]{1,5}\})
  


# ===== Scopes =====

  file_scope:
    name: meta.context.file-scope.bfec
    patterns:
      - include: "#comments"
      - include: "#decl_from"
      - include: "#decl_struct"
      - include: "#decl_enum"
      - include: "#decl_switch"
  
  struct_scope:
    name: meta.context.struct-scope.bfec
    patterns:
      - include: "#comments"
      - include: "#struct_field"
      - include: "#struct_expansion"
      - include: "#struct_size_prefix"
  
  enum_scope:
    name: meta.context.enum-scope.bfec
    patterns:
      - include: "#comments"
      - include: "#enum_member"
  
  switch_scope:
    name: meta.context.switch-scope.bfec
    patterns:
      - include: "#comments"
      - include: "#switch_case"
      - include: "#switch_default"
  


# ===== Declarations =====

  decl_from:
    name: meta.declaration.from.bfec
    begin: (?:\s*|\b)(?:(public|protected|private)\s+)?(from)\b\s+(?:(dynamic)\s+)?(.+)\s+(\{)
    beginCaptures:
      "1":
        name: keyword.modifier.privacy.bfec
      "2":
        name: keyword.control.from.bfec
      "3":
        name: keyword.modifier.dynamic.bfec
      "4":
        patterns:
          - include: "#string"
          - include: "#charstring"
          - include: "#name_path"
      "5":
        name: punctuation.start-block.open-brace.bfec
    end: (\})(;)
    endCaptures:
      "1":
        name: punctuation.end-block.close-brace.bfec
      "2":
        name: punctuation.statement-terminator.semicolon.bfec
    patterns:
      - match: \b([a-zA-Z_][a-zA-Z0-9_]*)(?:\s+(as)\s+([a-zA-Z_][a-zA-Z0-9_]*))?(?:\s*(,))?
        captures:
          "1":
            name: variable.other.readwrite.bfec
          "2":
            name: keyword.control.as.bfec
          "3":
            name: variable.other.readwrite.alias.bfec
          "4":
            name: punctuation.separator.comma.bfec
  
  decl_struct:
    name: meta.declaration.namespace.bfec
    begin: (?:\s*|\b)(?:(public|protected|private)\s+)?(namespace)\s+([a-zA-Z_][a-zA-Z0-9_]*)\s*(\{)
    beginCaptures:
      "1":
        name: storage.modifier.privacy.bfec
      "2":
        name: storage.type.namespace.bfec
      "3":
        name: entity.name.namespace.bfec
      "4":
        name: punctuation.start-block.open-brace.bfec
    end: \s*(\})
    endCaptures:
      "1":
        name: punctuation.end-block.close-brace.bfec
    patterns:
      - include: "#file_scope"
  
  decl_enum:
    name: meta.declaration.trait.bfec
    begin: (?:\s*|\b)(?:(public|protected|private)\s+)?(trait)\s+([a-zA-Z_][a-zA-Z0-9_]*)
    beginCaptures:
      "1":
        name: storage.modifier.privacy.bfec
      "2":
        name: storage.type.trait.bfec
      "3":
        name: entity.name.type.trait.bfec
    end: (?<=\})
    patterns:
      - include: "#comments"
      - include: "#decl_type_param_list"
      - name: meta.block.trait-body.bfec
        begin: \{
        beginCaptures:
          "0":
            name: punctuation.start-block.open-brace.bfec
        end: \}
        endCaptures:
          "0":
            name: punctuation.end-block.close-brace.bfec
        patterns:
          - include: "#trait_scope"

  decl_switch:
    name: meta.declaration.trait-impl.bfec
    begin: (?:\s*|\b)(implement)\s+(trait)\s+([a-zA-Z_][a-zA-Z0-9_]*)
    beginCaptures:
      "1":
        name: storage.type.implement.bfec
      "2":
        name: storage.type.trait.bfec
      "3":
        name: entity.name.type.trait.bfec
    end: (?<=\})
    patterns:
      - include: "#comments"
      - include: "#decl_type_param_list"
      - name: meta.declaration.implement-for.bfec
        begin: \s+(for)\s+([a-zA-Z_][a-zA-Z0-9_]*)
        beginCaptures:
          "1":
            name: storage.modifier.for.bfec
          "2":
            name: entity.name.type.bfec
        end: (?=\{)
        patterns:
          - include: "#comments"
          - include: "#decl_type_param_list"
      - name: meta.block.trait-impl-body.bfec
        begin: \{
        beginCaptures:
          "0":
            name: punctuation.start-block.open-brace.bfec
        end: \}
        endCaptures:
          "0":
            name: punctuation.end-block.close-brace.bfec
        patterns:
          - include: "#trait_impl_scope"
  

# ===== Expressions =====
  
  expression:
    patterns:
      - include: "#string"
      - include: "#charstring"
      - include: "#constants"
      - include: "#expr_paren"
      - include: "#expr_dereference"
      - include: "#expr_force_reinterpret"
      - include: "#expr_type_cast"
      - include: "#expr_index"
      - include: "#expr_sizeof_value"
      - include: "#expr_sizeof_type"
      - include: "#expr_idof_value"
      - include: "#expr_idof_type"
      - include: "#expr_call"
      - include: "#expr_build_conf"
      - include: "#op_unary_prefix"
      - include: "#op_unary_postfix"
      - include: "#op_binary"
      - include: "#op_ternary"
      - include: "#identifier"
  
  expr_paren:
    name: meta.expression.paren.bfec
    begin: (\()
    beginCaptures:
      "1":
        name: punctuation.paren-open.paren-left.bfec
    end: (\))
    endCaptures:
      "1":
        name: punctuation.paren-close.paren-right.bfec
    patterns:
      - include: "#expression"
  
  # TODO: Refactor
  expr_type_cast:
    name: meta.expression.type-cast.bfec
    match: (?:\s*|\b)(<)\s*(.+)(?=\s*>)\s*(>)\s*(.+)
    captures:
      "1":
        name: punctuation.start-type-cast.open-angle-bracket.bfec
      "2":
        patterns:
          - include: "#type_expression"
      "3":
        name: punctuation.end-type-cast.close-angle-bracket.bfec
      "4":
        patterns:
          - include: "#expression"
  
  # TODO: Refactor
  expr_dereference:
    name: meta.expression.dereference.bfec
    match: (?:\s*|\b)(<&)\s*(.+)\s*(>)\s*(.+)
    captures:
      "1":
        name: punctuation.start-dereference.open-angle-bracket.bfec
      "2":
        patterns:
          - include: "#type_expression"
      "3":
        name: punctuation.end-dereference.close-angle-bracket.bfec
      "4":
        patterns:
          - include: "#expression"
  
  # TODO: Refactor
  expr_force_reinterpret:
    name: meta.expression.force-reinterpret.bfec
    match: (?:\s*|\b)(<!)\s*(.+)\s*(>)\s*(.+)
    captures:
      "1":
        name: punctuation.start-force-reinterpret.open-angle-bracket.bfec
      "2":
        patterns:
          - include: "#type_expression"
      "3":
        name: punctuation.end-force-reinterpret.close-angle-bracket.bfec
      "4":
        patterns:
          - include: "#expression"
  
  # TODO: expr_index
  expr_index:
    name: meta.expression.index.bfec
  
  expr_call:
    name: meta.expression.call.bfec
    begin: >-
      (?x)
      (?:\s*|\b)
      (?:(new)\s+)?
      (?:
        ([a-zA-Z_][a-zA-Z0-9_])\s*
        (\.|\?\.)\s*
      )*
      ([a-zA-Z_][a-zA-Z0-9_]*)
      (?=<|\()
    beginCaptures:
      "1":
        name: keyword.operator.new
      "2":
        name: entity.name.namespace.bfec
      "3":
        name: keyword.operator.property-access.bfec
      "4":
        name: entity.name.function.bfec
    end: (?<=\))
    patterns:
      - include: "#comments"
      - include: "#expr_type_param_list"
      - include: "#expr_param_list"
  
  # TODO: Refactor to use new params pattern
  expr_sizeof_value:
    name: meta.expression.sizeof-value.bfec
    match: (?:\s*|\b)(sizeof)\s*(\()\s*(.+)\s*(\))
    captures:
      "1":
        name: support.function.sizeof.bfec
      "2":
        name: punctuation.start-param.open-paren.bfec
      "3":
        patterns:
          - include: "#expression"
      "4":
        name: punctuation.end-param.close-paren.bfec
  
  # TODO: Refactor to use new type params pattern
  expr_sizeof_type:
    name: meta.expression.sizeof-type.bfec
    match: (?:\s*|\b)(sizeof)\s*(<)\s*(.+)\s*(>)
    captures:
      "1":
        name: support.function.sizeof.bfec
      "2":
        name: punctuation.start-type-param.open-angle-bracket.bfec
      "3":
        patterns:
          - include: "#type_expression"
      "4":
        name: punctuation.end-type-param.close-angle-bracket.bfec
  
  # TODO: Refactor to use new params pattern
  expr_idof_value:
    name: meta.expression.idof-value.bfec
    match: (?:\s*|\b)(idof)\s*(\()\s*(.+)\s*(\))
    captures:
      "1":
        name: support.function.idof.bfec
      "2":
        name: punctuation.start-param.open-paren.bfec
      "3":
        patterns:
          - include: "#expression"
      "4":
        name: punctuation.end-param.close-paren.bfec
  
  # TODO: Refactor to use new type params pattern
  expr_idof_type:
    name: meta.expression.idof-type.bfec
    match: (?:\s*|\b)(idof)\s*(<)\s*(.+)\s*(>)
    captures:
      "1":
        name: support.function.idof.bfec
      "2":
        name: punctuation.start-type-param.open-angle-bracket.bfec
      "3":
        patterns:
          - include: "#type_expression"
      "4":
        name: punctuation.end-type-param.close-angle-bracket.bfec
  
  expr_build_conf:
    name: meta.expression.build-conf.bfec
    match: (?:\s*|\b)(#)([a-zA-Z0-9_\.]*)
    captures:
      "1":
        name: support.constant.symbol.bfec
      "2":
        name: support.constant.bfec
        patterns:
          - include: "#name_path"
  
  expr_type_param_list:
    name: meta.expression.type-param-list.bfec
    begin: (?<=[a-zA-Z_][a-zA-Z0-9_]*\s*)(<)
    beginCaptures:
      "1":
        name: punctuation.type-param-list-open.angle-bracket-left.bfec
    end: ">"
    endCaptures:
      "0":
        name: punctuation.type-param-list-close.angle-bracket-right.bfec
    patterns:
      - include: "#comments"
      - include: "#type_expression"
      - name: punctuation.type-param-list.bfec
        match: ","
        captures:
          "0":
            name: punctuation.separator.comma.bfec
  
  expr_param_list:
    name: meta.expression.param-list.bfec
    begin: (?<=[a-zA-Z_][a-zA-Z0-9_]*\s*|>\s*)(\()
    beginCaptures:
      "1":
        name: punctuation.param-list-open.paren-left.bfec
    end: \)
    endCaptures:
      "0":
        name: punctuation.param-list-close.paren-right.bfec
    patterns:
      - include: "#comments"
      - include: "#expr_param"
      - name: punctuation.param-list.bfec
        match: ","
        captures:
          "0":
            name: punctuation.separator.comma.bfec

  # NOTE: This doesn't match correctly for multi-line call statements where params
  # start at the beginning of their own line, and have an explicit parameter name
  expr_param:
    name: meta.expression.param.bfec
    begin: >-
      (?x)
      (?<=[,\(])\s*
      (?:
        ([a-zA-Z_][a-zA-Z0-9_]*)\s*
        (:=)\s*
      )?
    beginCaptures:
      "1":
        name: variable.parameter.bfec
      "2":
        name: keyword.operator.assign-param.bfec
    end: (?=[,\)])
    patterns:
      - include: "#comments"
      - include: "#expression"
  
  

# ===== Type Expressions =====
  
  type_expression:
    patterns:
      - include: "#comments"
      - include: "#type_expr_wasm_type"
      - include: "#type_expr_named"
      - include: "#type_expr_tuple"
      - include: "#type_expr_func_signature"
      - include: "#type_expr_union"
      - include: "#type_expr_enum"
  
  type_expr_wasm_type:
    name: meta.type-expression.wasm-type.bfec
    match: >-
      (?x)
      ( \$i32
      | \$i64
      | \$f32
      | \$f64
      | \$funcref
      | \$externref
      | \$v128
      | \$v128_i8x16
      | \$v128_i16x8
      | \$v128_i32x4
      | \$v128_i64x2
      | \$v128_f32x4
      | \$v128_f64x2
      )\b
    captures:
      "1":
        name: entity.name.type.bfec
  
  # FIXME: Is this working correctly for namespaced types (i.e. `foo.bar.baz`)
  type_expr_named:
    name: meta.type-expression.named.bfec
    begin: \b([a-zA-Z_][a-zA-Z0-9_]*)
    beginCaptures:
      "1":
        name: entity.name.type.bfec
    end: (?=[+|;>\)\}\],={])
    patterns:
      - include: "#comments"
      - match: \s*(\.)\s*()
      - begin: (?<=[a-zA-Z_][a-zA-Z0-9_]*\s*)(<)
        beginCaptures:
          "1":
            name: punctuation.generic-open.angle-bracket-left.bfec
        end: ">"
        endCaptures:
          "0":
            name: punctuation.generic-close.angle-bracket-right.bfec
        patterns:
          - include: "#comments"
          - include: "#type_expression"
  
  type_expr_tuple:
    name: meta.type-expression.tuple.bfec
    begin: (\[)
    beginCaptures:
      "1":
        name: punctuation.tuple-open.square-bracket-left.bfec
    end: (\])
    endCaptures:
      "1":
        name: punctuation.tuple-close.square-bracket-right.bfec
    patterns:
      - name: punctuation.separator.comma.bfec
        match: (,)
      - include: "#type_expression"
  
  # TODO: type_expr_func_signature
  type_expr_func_signature:
    name: meta.type-expression.func-signature.bfec
  
  type_expr_union:
    name: keyword.operator.type-expr-union.bfec
    match: (\+)
  
  type_expr_enum:
    name: keyword.operator.type-expr-enum.bfec
    match: (\|)
