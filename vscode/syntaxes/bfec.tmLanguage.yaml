$schema: https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json
name: bfec
scopeName: source.bfec
patterns:
  - include: "#file_scope"
repository:
  comments:
    patterns:
      - name: comment.line.hash.bfec
        match: "#.*"
  
  identifier:
    match: \b[a-zA-Z_][a-zA-Z0-9_]*\b
    name: variable.name.bfec
  
  name_path:
    name: meta.expression.name-path.bfec
    match: >-
      (?x)\b(?:
        ([a-zA-Z_][a-zA-Z0-9_])\s*
        (\.|\?\.)\s*
      )*
      ([a-zA-Z_][a-zA-Z0-9_]*)
    captures:
      "1":
        name: entity.name.namespace.bfec
      "2":
        name: keyword.operator.property-access.bfec
      "3":
        name: entity.name.namespace.bfec
  
  constants:
    patterns:
      - name: constant.numeric.float.bfec
        match: \b-?[0-9]+\.[0-9]+\b
      - name: constant.numeric.hex.bfec
        match: \b-?0x[0-9a-fA-Z]+\b
      - name: constant.numeric.integer.bfec
        match: \b-?[0-9]+\b
  
  charstring:
    name: string.quoted.double.bfec
    begin: '"'
    end: '"'
    beginCaptures:
      "0":
        name: punctuation.definition.string.begin
    endCaptures:
      "0":
        name: punctuation.definition.string.end
    patterns:
      - name: constant.character.escape.bfec
        match: \\(n|r|t|b|0|\\|"|x[0-9a-fA-F]{2})
  
  string:
    name: string.quoted.single.bfec
    begin: "'"
    end: "'"
    beginCaptures:
      "0":
        name: punctuation.definition.string.begin
    endCaptures:
      "0":
        name: punctuation.definition.string.end
    patterns:
      - name: constant.character.escape.bfec
        match: \\(n|r|t|b|0|\\|'|x[0-9a-fA-F]{2}|u\{[0-9a-fA-F]{1,5}\})
  


# ===== Scopes =====

  file_scope:
    name: meta.context.file-scope.bfec
    patterns:
      - include: "#comments"
      - include: "#decl_from"
      - include: "#decl_struct"
      - include: "#decl_enum"
      - include: "#decl_switch"
  
  struct_scope:
    name: meta.context.struct-scope.bfec
    patterns:
      - include: "#comments"
      - include: "#struct_field"
      - include: "#struct_expansion"
      - include: "#struct_size_prefix"
  
  enum_scope:
    name: meta.context.enum-scope.bfec
    patterns:
      - include: "#comments"
      - include: "#enum_member"
  
  switch_scope:
    name: meta.context.switch-scope.bfec
    patterns:
      - include: "#comments"
      - include: "#switch_case"
      - include: "#switch_default"
  


# ===== Declarations =====

  decl_from:
    name: meta.declaration.from.bfec
    begin: (?:\s*|\b)(from)\s*
    beginCaptures:
      "1":
        name: keyword.control.from.bfec
    end: ;
    endCaptures:
      "0":
        name: punctuation.terminator.semicolon.bfec
    patterns:
      - include: "#comments"
      - name: string.quoted.double.bfec
        begin: (?<=from\s+)(")
        beginCaptures:
          "1":
            name: punctuation.definition.string.begin
        end: (")\s*
        endCaptures:
          "1":
            name: punctuation.definition.string.end
        patterns:
          - name: constant.character.escape.bfec
            match: \\(n|r|t|b|0|\\|"|x[0-9a-fA-F]{2})
      - name: string.quoted.single.bfec
        begin: (?<=from\s+)(')
        beginCaptures:
          "1":
            name: punctuation.definition.string.begin
        end: (')\s*
        endCaptures:
          "1":
            name: punctuation.definition.string.end
        patterns:
          - name: constant.character.escape.bfec
            match: \\(n|r|t|b|0|\\|'|x[0-9a-fA-F]{2}|u\{[0-9a-fA-F]{1,5}\})
      - match: (?<=(?:"|')\s*)([a-zA-Z_][a-zA-Z0-9_]*)\s*(?=;)
        captures:
          "1":
            name: entity.name.struct.bfec
      - name: meta.declaration.from-members.bfec
        begin: (?<=)(\{)
        beginCaptures:
          "1":
            name: punctuation.from-list.open-brace.bfec
        end: (\})\s*(?=;)
        endCaptures:
          "1":
            name: punctuation.from-list.close-brace.bfec
        patterns:
          - include: "#comments"
          - name: meta.declaration.from-member.bfec
            match: >-
              (?x)
              \s*
              ([a-zA-Z_][a-zA-Z0-9_]*)
              (?:
                \s+(as)\s+
                ([a-zA-Z_][a-zA-Z0-9_]*)
              )?
              (?:
                \s*(,)
              )?
            captures:
              "1":
                name: variable.other.bfec
              "2":
                name: keyword.control.as.bfec
              "3":
                name: variable.other.alias.bfec
              "4":
                name: punctuation.separator.comma.bfec

  decl_struct:
    name: meta.declaration.struct.bfec
    begin: (?:\s*|\b)(struct)\s+(\$|[a-zA-Z_][a-zA-Z0-9_]*)\s*(\{)
    beginCaptures:
      "1":
        name: storage.type.struct.bfec
      "2":
        name: entity.name.struct.bfec
      "3":
        name: punctuation.start-block.open-brace.bfec
    end: \s*(\})
    endCaptures:
      "1":
        name: punctuation.end-block.close-brace.bfec
    patterns:
      - include: "#struct_scope"

  # TODO: Struct Field
  struct_field:
    # 

  # TODO: Struct Expansion
  struct_expansion:
    name: meta.declaration.struct-expansion.bfec
    match: \s*(\.\.\.)\s*

  struct_size_prefix:
    name: meta.declaration.struct-size-prefix.bfec
    match: >-
      (?x)
      \s*
      (\$size)\s*
      (:)\s*
      (?:
        (i8 | i16 | i32 | i64 | i128 | u8 | u16 | u32 | u64 | u128)
      | (?:
          (varint) \s*
          (\() \s*
          (i8 | i16 | i32 | i64 | i128 | u8 | u16 | u32 | u64 | u128) \s*
          (\))
        )
      )
    captures:
      "1":
        name: keyword.control.size.bfec
      "2":
        name: punctuation.type-definition.colon.bfec
      "3":
        name: support.function.bfec entity.name.builtin.int.bfec
      "4":
        name: support.function.bfec entity.name.builtin.varint.bfec
      "5":
        name: punctuation.paren-open.paren-left.bfec
      "6":
        name: support.function.bfec entity.name.builtin.int.bfec
      "7":
        name: punctuation.paren-close.paren-right.bfec
  
  decl_enum:
    name: meta.declaration.enum.bfec
    begin: >-
      (?x)
      \s*
      (enum)\s+
      ([a-zA-Z_][a-zA-Z0-9_]*)\s*
      (:)\s*
    beginCaptures:
      "1":
        name: storage.type.enum.bfec
      "2":
        name: entity.name.class.enum.bfec
      "3":
        name: punctuation.type-definition.colon.bfec
    end: (?<=\})
    patterns:
      - begin: (?<=:\s*)
        end: (?=\s*\{)
        patterns:
          - include: "#comments"
          - include: "#type_expr_builtin"
      - name: meta.block.enum-body.bfec
        begin: (?<!\})\s*(\{)
        beginCaptures:
          "1":
            name: punctuation.start-block.open-brace.bfec
        end: \s*(\})
        endCaptures:
          "1":
            name: punctuation.end-block.close-brace.bfec
        patterns:
          - include: "#enum_scope"

  enum_member:
    name: meta.declaration.enum-member.bfec
    begin: \s*([a-zA-Z_][a-zA-Z0-9_]*)\s*(=)\s*
    beginCaptures:
      "1":
        name: variable.member.name.bfec
      "2":
        name: keyword.operator.assign.bfec
    end: ;
    endCaptures:
      "0":
        name: punctuation.terminator.semicolon.bfec
    patterns:
      - include: "#comments"
      - include: "#constants"

  # TODO: Switch
  decl_switch:
    name: meta.declaration.trait-impl.bfec
    begin: (?:\s*|\b)(implement)\s+(trait)\s+([a-zA-Z_][a-zA-Z0-9_]*)
    beginCaptures:
      "1":
        name: storage.type.implement.bfec
      "2":
        name: storage.type.trait.bfec
      "3":
        name: entity.name.type.trait.bfec
    end: (?<=\})
    patterns:
      - include: "#comments"
      - include: "#decl_type_param_list"
      - name: meta.declaration.implement-for.bfec
        begin: \s+(for)\s+([a-zA-Z_][a-zA-Z0-9_]*)
        beginCaptures:
          "1":
            name: storage.modifier.for.bfec
          "2":
            name: entity.name.type.bfec
        end: (?=\{)
        patterns:
          - include: "#comments"
          - include: "#decl_type_param_list"
      - name: meta.block.trait-impl-body.bfec
        begin: \{
        beginCaptures:
          "0":
            name: punctuation.start-block.open-brace.bfec
        end: \}
        endCaptures:
          "0":
            name: punctuation.end-block.close-brace.bfec
        patterns:
          - include: "#trait_impl_scope"
  

# ===== Expressions =====
  
  expression:
    patterns:
      - include: "#string"
      - include: "#charstring"
      - include: "#constants"
      - include: "#expr_paren"
      - include: "#expr_index"
      - include: "#expr_call"
  
  expr_paren:
    name: meta.expression.paren.bfec
    begin: (\()
    beginCaptures:
      "1":
        name: punctuation.paren-open.paren-left.bfec
    end: (\))
    endCaptures:
      "1":
        name: punctuation.paren-close.paren-right.bfec
    patterns:
      - include: "#expression"
  
  # TODO: expr_index
  expr_index:
    name: meta.expression.index.bfec
  
  expr_call:
    name: meta.expression.call.bfec
    begin: >-
      (?x)
      (?:\s*|\b)
      (?:(new)\s+)?
      (?:
        ([a-zA-Z_][a-zA-Z0-9_])\s*
        (\.|\?\.)\s*
      )*
      ([a-zA-Z_][a-zA-Z0-9_]*)
      (?=<|\()
    beginCaptures:
      "1":
        name: keyword.operator.new
      "2":
        name: entity.name.namespace.bfec
      "3":
        name: keyword.operator.property-access.bfec
      "4":
        name: entity.name.function.bfec
    end: (?<=\))
    patterns:
      - include: "#comments"
      - include: "#expr_type_param_list"
      - include: "#expr_param_list"
  
  expr_param_list:
    name: meta.expression.param-list.bfec
    begin: (?<=[a-zA-Z_][a-zA-Z0-9_]*\s*|>\s*)(\()
    beginCaptures:
      "1":
        name: punctuation.param-list-open.paren-left.bfec
    end: \)
    endCaptures:
      "0":
        name: punctuation.param-list-close.paren-right.bfec
    patterns:
      - include: "#comments"
      - include: "#expr_param"
      - name: punctuation.param-list.bfec
        match: ","
        captures:
          "0":
            name: punctuation.separator.comma.bfec

  # NOTE: This doesn't match correctly for multi-line call statements where params
  # start at the beginning of their own line, and have an explicit parameter name
  expr_param:
    name: meta.expression.param.bfec
    begin: >-
      (?x)
      (?<=[,\(])\s*
      (?:
        ([a-zA-Z_][a-zA-Z0-9_]*)\s*
        (:=)\s*
      )?
    beginCaptures:
      "1":
        name: variable.parameter.bfec
      "2":
        name: keyword.operator.assign-param.bfec
    end: (?=[,\)])
    patterns:
      - include: "#comments"
      - include: "#expression"
  
  

# ===== Type Expressions =====
  
  type_expression:
    patterns:
      - include: "#comments"
      - include: "#type_expr_builtin"
      - include: "#type_expr_named"
      - include: "#constants"
      - include: "#charstring"
      - include: "#string"
  
  type_expr_builtin:
    name: meta.type-expression.builtin.bfec
    match: >-
      (?x)
      (?: (i8 | i16 | i32 | i64 | i128 | u8 | u16 | u32 | u64 | u128)
      | (?: (varint) \s* (\() \s* (i8 | i16 | i32 | i64 | i128 | u8 | u16 | u32 | u64 | u128) \s* (\)) )
      | (f16 | f32 | f64 | d16 | d32 | d64)
      | (b (?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 ))
      | (ascii | utf8 | utf16 | utf32)
      )\b
    captures:
      "1":
        name: support.function.bfec entity.name.builtin.int.bfec
      "2":
        name: support.function.bfec entity.name.builtin.varint.bfec
      "3":
        name: punctuation.paren-open.paren-left.bfec
      "4":
        name: support.function.bfec entity.name.builtin.int.bfec
      "5":
        name: punctuation.paren-close.paren-right.bfec
      "6":
        name: support.function.bfec entity.name.builtin.float.bfec
      "7":
        name: support.function.bfec entity.name.builtin.bit.bfec
      "8":
        name: support.function.bfec entity.name.builtin.text.bfec
  
  # TODO: Named Type Expression
  #   Foo
  #   Foo(bar)
  type_expr_named:
    name: meta.type-expression.named.bfec
    begin: \b([a-zA-Z_][a-zA-Z0-9_]*)
    beginCaptures:
      "1":
        name: entity.name.type.bfec
    end: (?=[+|;>\)\}\],={])
    patterns:
      - include: "#comments"
      - match: \s*(\.)\s*()
      - begin: (?<=[a-zA-Z_][a-zA-Z0-9_]*\s*)(<)
        beginCaptures:
          "1":
            name: punctuation.generic-open.angle-bracket-left.bfec
        end: ">"
        endCaptures:
          "0":
            name: punctuation.generic-close.angle-bracket-right.bfec
        patterns:
          - include: "#comments"
          - include: "#type_expression"
  