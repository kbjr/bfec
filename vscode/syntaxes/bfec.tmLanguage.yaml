$schema: https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json
name: bfec
scopeName: source.bfec
patterns:
  - include: "#file_scope"
repository:
  comments:
    patterns:
      - name: comment.line.hash.bfec
        match: "#.*"
  
  enum_name:
    name: entity.name.enum.bfec
    match: \b[a-zA-Z_][a-zA-Z0-9_]*\b
  
  switch_name:
    name: entity.name.switch.bfec
    match: \b[a-zA-Z_][a-zA-Z0-9_]*\b

  name_path:
    name: meta.expression.name-path.bfec
    match: >-
      (?x)
      \s*
      ([a-zA-Z_][a-zA-Z0-9_]*|\$|@)\s*
      (?:
        (\.)\s*
        ([a-zA-Z_][a-zA-Z0-9_]*)
      )*
    captures:
      "1":
        patterns:
          - match: \$|@
            name: entity.name.struct.bfec entity.name.type.class.bfec
          - match: (?:[a-zA-Z_][a-zA-Z0-9_]*)
            name: entity.name.type.bfec
      "2":
        name: keyword.operator.property-access.bfec
      "3":
        name: entity.name.type.bfec
  
  constant_float:
    patterns:
      - name: constant.numeric.float.bfec
        match: \b-?[0-9]+\.[0-9]+\b

  constant_int:
    patterns:
      - name: constant.numeric.hex.bfec
        match: \b-?0x[0-9a-fA-Z][0-9a-fA-Z_]+\b
      - name: constant.numeric.integer.bfec
        match: \b-?[0-9]+\b

  constants:
    patterns:
      - include: "#constant_float"
      - include: "#constant_int"
  
  charstring:
    name: string.quoted.double.bfec
    begin: '"'
    end: '"'
    beginCaptures:
      "0":
        name: punctuation.definition.string.begin
    endCaptures:
      "0":
        name: punctuation.definition.string.end
    patterns:
      - name: constant.character.escape.bfec
        match: \\(n|r|t|b|0|\\|"|x[0-9a-fA-F]{2})
  
  string:
    name: string.quoted.single.bfec
    begin: "'"
    end: "'"
    beginCaptures:
      "0":
        name: punctuation.definition.string.begin
    endCaptures:
      "0":
        name: punctuation.definition.string.end
    patterns:
      - name: constant.character.escape.bfec
        match: \\(n|r|t|b|0|\\|'|x[0-9a-fA-F]{2}|u\{[0-9a-fA-F]{1,5}\})
  
  separator:
    match: \s*(,)
    captures:
      "1":
        name: punctuation.separator.comma.bfec



# ===== Types =====

  type_expr:
    name: meta.type-expression.bfec
    patterns:
      - include: "#comments"
      - include: "#type_builtin"
      - include: "#constants"
      - include: "#charstring"
      - include: "#string"
      - include: "#type_expr_array"
      - include: "#type_expr_named"

  type_expr_builtin_int:
    match: \b((?:i8|i16|i24|i32|i64|i128|u8|u16|u24|u32|u64|u128)(?:_le|_be)?)\b
    captures:
      "1":
        name: support.function.bfec entity.name.builtin.int.bfec

  type_expr_builtin_bit:
    match: \b(b(?:1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31|32))\b
    captures:
      "1":
        name: support.function.bfec entity.name.builtin.bit.bfec

  type_expr_builtin_varint:
    begin: \b(varint)\s*(<)\s*
    beginCaptures:
      "1":
        name: support.function.bfec entity.name.builtin.varint.bfec
      "2":
        name: punctuation.type-param-open.angle-bracket-left.bfec
    end: \s*(>)
    endCaptures:
      "1":
        name: punctuation.type-param-close.angle-bracket-right.bfec
    patterns:
      - include: "#comments"
      - include: "#type_expr_builtin_int"

  type_expr_builtin_float:
    match: \b(f16|f32|f64|d16|d32|d6)\b
    captures:
      "1":
        name: support.function.bfec entity.name.builtin.float.bfec

  type_expr_builtin_string:
    begin: \b(ascii|utf8|utf16|utf32)\s*(<)\s*
    beginCaptures:
      "1":
        name: support.function.bfec entity.name.builtin.string.bfec
      "2":
        name: punctuation.type-param-open.angle-bracket-left.bfec
    end: \s*(>)
    endCaptures:
      "1":
        name: punctuation.type-param-open.angle-bracket-left.bfec
    patterns:
      - include: "#comments"
      - name: keyword.control.null.bfec
        match: "null"
      - include: "#name_path"
      - include: "#type_expr_builtin_int"
      - include: "#constant_int"
      - name: keyword.operator.expansion.bfec
        match: \.\.\.

  type_builtin:
    name: meta.type-expression.builtin.bfec
    patterns:
      - include: "#type_expr_builtin_int"
      - include: "#type_expr_builtin_bit"
      - include: "#type_expr_builtin_varint"
      - include: "#type_expr_builtin_float"
      - include: "#type_expr_builtin_string"
    
  param_expr:
    patterns:
      - include: "#comments"
      - include: "#name_path"
      - name: meta.expression.logical.not.bfec
        begin: (!)\s*
        beginCaptures:
          "1":
            name: keyword.operator.logical.not.bfec
        end: (?=[,\)])
        patterns:
          - include: "#comments"
          - include: "#param_expr"
      - name: meta.expression.binary.bfec
        begin: (?<=[a-zA-Z0-9_]+)\s*(&|\||\^|==|!=)\s*
        end: (?=[,\)])
        patterns:
          - include: "#comments"
          - include: "#param_expr"
          - include: "#separator"

  type_expr_named:
    name: meta.type-expression.named.bfec
    begin: \s*([a-zA-Z_][a-zA-Z0-9_]*)
    beginCaptures:
      "1":
        name: entity.name.function.bfec
    end: (?=\s*[;\[\{])
    patterns:
      - include: "#comments"
      - include: "#type_expr_param_list"

  type_expr_array:
    name: meta.type-expression.array.bfec
    begin: (?<=[a-zA-Z0-9_\)\]])\s*(\[)\s*
    beginCaptures:
      "1":
        name: punctuation.start-list.open-bracket.bfec
    end: \s*(\])
    endCaptures:
      "1":
        name: punctuation.end-list.close-bracket.bfec
    patterns:
      - include: "#comments"
      - include: "#type_builtin"
      - name: keyword.control.null.bfec
        match: "null"
      - include: "#param_expr"
      - match: \s*(\.\.\.)\s*
        captures:
          "1":
            name: keyword.operator.expansion.bfec

  type_expr_param_list:
    name: meta.type-expression.param-list.bfec
    begin: (?<=[a-zA-Z0-9_]*)\s*(\()
    beginCaptures:
      "1":
        name: punctuation.start-parems.open-paren.bfec
    end: \s*(\))
    endCaptures:
      "1":
        name: punctuation.end-parems.close-paren.bfec
    patterns:
      - include: "#param_expr"



# ===== Type Refinements =====

  refine_struct_inline:
    name: meta.refinement.inline-struct.bfec
    begin: (?<!\})\s*(->)\s*(bin|struct)\s*(\{)
    beginCaptures:
      "1":
        name: keyword.operator.refine.bfec
      "2":
        name: keyword.control.struct.bfec
      "3":
        name: punctuation.start-block.open-brace.bfec
    end: \s*(\})
    endCaptures:
      "1":
        name: punctuation.end-block.close-brace.bfec
    patterns:
      - include: "#struct_scope"

  refine_switch_inline:
    name: meta.refinement.inline-switch.bfec
    begin: (?<!\})\s*(->)\s*(switch)\s*(\()
    end: (?<=\})
    # TODO: refine_switch_inline

  refine_type_expr:
    name: meta.refinement.type-expr.bfec
    begin: (?<!\})\s*(->)\s*
    end: (?=\s*;)
    patterns:
      - include: "#type_expr"




# ===== Scopes =====

  file_scope:
    name: meta.context.file-scope.bfec
    patterns:
      - include: "#comments"
      - include: "#decl_from"
      - include: "#decl_struct"
      - include: "#decl_enum"
      - include: "#decl_switch"
  
  struct_scope:
    name: meta.context.struct-scope.bfec
    patterns:
      - include: "#comments"
      - include: "#struct_field"
      - include: "#struct_expansion"
      - include: "#struct_size_prefix"
  
  enum_scope:
    name: meta.context.enum-scope.bfec
    patterns:
      - include: "#comments"
      - include: "#enum_member"
  
  switch_scope:
    name: meta.context.switch-scope.bfec
    patterns:
      - include: "#comments"
      - include: "#switch_case"
      - include: "#switch_default"
  


# ===== Declarations =====

  decl_from:
    name: meta.declaration.from.bfec
    begin: (?:\s*|\b)(from)\s*
    beginCaptures:
      "1":
        name: storage.import.bfec
    end: ;
    endCaptures:
      "0":
        name: punctuation.terminator.semicolon.bfec
    patterns:
      - include: "#comments"
      - name: string.quoted.double.bfec
        begin: (?<=from\s+)(")
        beginCaptures:
          "1":
            name: punctuation.definition.string.begin
        end: (")\s*
        endCaptures:
          "1":
            name: punctuation.definition.string.end
        patterns:
          - name: constant.character.escape.bfec
            match: \\(n|r|t|b|0|\\|"|x[0-9a-fA-F]{2})
      - name: string.quoted.single.bfec
        begin: (?<=from\s+)(')
        beginCaptures:
          "1":
            name: punctuation.definition.string.begin
        end: (')\s*
        endCaptures:
          "1":
            name: punctuation.definition.string.end
        patterns:
          - name: constant.character.escape.bfec
            match: \\(n|r|t|b|0|\\|'|x[0-9a-fA-F]{2}|u\{[0-9a-fA-F]{1,5}\})
      - match: (?<=(?:"|')\s*)([a-zA-Z_][a-zA-Z0-9_]*)\s*(?=;)
        captures:
          "1":
            name: entity.name.struct.bfec
      - name: meta.declaration.from-members.bfec
        begin: (?<=)(\{)
        beginCaptures:
          "1":
            name: punctuation.from-list.open-brace.bfec
        end: (\})\s*(?=;)
        endCaptures:
          "1":
            name: punctuation.from-list.close-brace.bfec
        patterns:
          - include: "#comments"
          - name: meta.declaration.from-member.bfec
            match: >-
              (?x)
              \s*
              ([a-zA-Z_][a-zA-Z0-9_]*)
              (?:
                \s+(as)\s+
                ([a-zA-Z_][a-zA-Z0-9_]*)
              )?
              (?:
                \s*(,)
              )?
            captures:
              "1":
                name: variable.other.bfec
              "2":
                name: keyword.control.as.bfec
              "3":
                name: variable.other.alias.bfec
              "4":
                name: punctuation.separator.comma.bfec

  decl_struct:
    name: meta.declaration.struct.bfec
    begin: (?:\s*|\b)(struct|bin)\s+(\$|[a-zA-Z_][a-zA-Z0-9_]*)\s*
    beginCaptures:
      "1":
        name: storage.type.struct.bfec
      "2":
        name: entity.name.struct.bfec entity.name.type.class.bfec
    end: (?<=\})
    patterns:
      - include: "#comments"
      - name: meta.declaration.struct-param-list.bfec
        begin: (?<=(?:\$|[a-zA-Z_][a-zA-Z0-9_]*)\s*)(\()\s*
        beginCaptures:
          "1":
            name: punctuation.param-list-open.paren-left.bfec
        end: \)
        endCaptures:
          "0":
            name: punctuation.param-list-open.paren-left.bfec
        patterns:
          - include: "#comments"
          - name: meta.declaration.struct-param.bfec
            begin: \s*([a-zA-Z_][a-zA-Z0-9_]*)\s*(:)\s*
            beginCaptures:
              "1":
                name: variable.parameter.bfec
              "2":
                name: punctuation.type-definition.colon.bfec
            end: (?=,|\))
            patterns:
              - include: "#comments"
              - include: "#enum_name"
      - name: meta.block.struct-body.bfec
        begin: \s*(\{)
        beginCaptures:
          "1":
            name: punctuation.start-block.open-brace.bfec
        end: \s*(\})
        endCaptures:
          "1":
            name: punctuation.end-block.close-brace.bfec
        patterns:
          - include: "#struct_scope"

  struct_field:
    name: meta.declaration.struct-member.bfec
    begin: \s*([a-zA-Z_][a-zA-Z0-9_]*)\s*
    beginCaptures:
      "1":
        name: variable.member.name.bfec
      "2":
        name: punctuation.type-definition.colon.bfec
    end: \s*(;)
    endCaptures:
      "1":
        name: punctuation.terminator.semicolon.bfec
    patterns:
      - include: "#comments"
      - include: "#struct_field_optional"
      - include: "#struct_type_definition"
      - include: "#refine_struct_inline"
      - include: "#refine_switch_inline"
      - include: "#refine_type_expr"
      - match: (?<=[a-zA-Z0-9_\)])\s*(=)\s*([a-zA-Z_][a-zA-Z0-9_]*)
        captures:
          "1":
            name: keyword.operator.assign.bfec
          "2":
            name: variable.assignment.bfec

  struct_field_optional:
    # Optional fields
    # 
    #     bar?($.baz == bool.true): Qux;
    #        ^^                  ^
    # 
    name: meta.declaration.struct-field-optional.bfec
    begin: (?<=[a-zA-Z0-9_]\s*)(\?\()
    beginCaptures:
      "1":
        name: punctuation.optional-condition.open-paren.bfec
    end: \s*(\))\s*(?=:)
    endCaptures:
      "1":
        name: punctuation.optional-condition.close-paren.bfec
    patterns:
      # FIXME: This should be a bool expr
      - include: "#param_expr"

  struct_type_definition:
    # Type definition
    # 
    #     foo: bar;
    #        ^    ^
    # 
    name: meta.declaration.struct-type-definition.bfec
    begin: (?<=[a-zA-Z0-9_\)]\s*)(:)\s*
    end: (?=\s*=|->|;)
    patterns:
      - include: "#type_expr"

  struct_expansion:
    name: meta.declaration.struct-expansion.bfec
    begin: \s*(\.\.\.)\s*(?=([a-zA-Z_][a-zA-Z0-9_]*))
    beginCaptures:
      "1":
        name: keyword.operator.expansion.bfec
      "2":
        name: entity.other.inherited-class.bfec
    end: \s*(;)
    endCaptures:
      "1":
        name: punctuation.terminator.semicolon.bfec
    patterns:
      - include: "#type_expr"
      - include: "#refine_struct_inline"
      - include: "#refine_switch_inline"
      - include: "#refine_type_expr"
      
  decl_enum:
    name: meta.declaration.enum.bfec
    begin: >-
      (?x)
      \s*
      (enum)\s+
      ([a-zA-Z_][a-zA-Z0-9_]*)\s*
      (:)\s*
    beginCaptures:
      "1":
        name: storage.type.enum.bfec
      "2":
        name: entity.name.enum.bfec entity.name.type.class.bfec
      "3":
        name: punctuation.type-definition.colon.bfec
    end: (?<=\})
    patterns:
      - begin: (?<=:\s*)
        end: (?=\s*\{)
        patterns:
          - include: "#comments"
          - include: "#type_expr"
      - name: meta.block.enum-body.bfec
        begin: (?<!\})\s*(\{)
        beginCaptures:
          "1":
            name: punctuation.start-block.open-brace.bfec
        end: \s*(\})
        endCaptures:
          "1":
            name: punctuation.end-block.close-brace.bfec
        patterns:
          - include: "#enum_scope"

  enum_member:
    name: meta.declaration.enum-member.bfec
    begin: \s*([a-zA-Z_][a-zA-Z0-9_]*)\s*(=)\s*
    beginCaptures:
      "1":
        name: variable.member.name.bfec
      "2":
        name: keyword.operator.assign.bfec
    end: ;
    endCaptures:
      "0":
        name: punctuation.terminator.semicolon.bfec
    patterns:
      - include: "#comments"
      - include: "#constants"
      - include: "#charstring"
      - include: "#string"

  decl_switch:
    name: meta.declaration.switch.bfec
    begin: (?:\s*|\b)(switch)\s+([a-zA-Z_][a-zA-Z0-9_]*)
    beginCaptures:
      "1":
        name: storage.type.switch.bfec
      "2":
        name: entity.name.switch.bfec entity.name.type.class.bfec
    end: (?<=\})
    patterns:
      - include: "#comments"
      - name: meta.declaration.switch-param-list.bfec
        begin: (?<=(?:[a-zA-Z_][a-zA-Z0-9_]*)\s*)(\()\s*
        beginCaptures:
          "1":
            name: punctuation.param-list-open.paren-left.bfec
        end: \)
        endCaptures:
          "0":
            name: punctuation.param-list-open.paren-left.bfec
        patterns:
          - include: "#comments"
          - include: "#enum_name"
      - name: meta.block.switch-body.bfec
        begin: \{
        beginCaptures:
          "0":
            name: punctuation.start-block.open-brace.bfec
        end: \}
        endCaptures:
          "0":
            name: punctuation.end-block.close-brace.bfec
        patterns:
          - include: "#switch_scope"
  
  switch_case:
    name: meta.branch.switch-case.bfec
    begin: \s*(case)\s+([a-zA-Z_][a-zA-Z0-9_]*)\s*(:)\s*
    beginCaptures:
      "1":
        name: keyword.control.case.bfec
      "2":
        name: constant.other.enum-member.bfec
      "3":
        name: punctuation.type-definition.colon.bfec
    end: \s*(;)
    endCaptures:
      "1":
        name: punctuation.terminator.semicolon.bfec
    patterns:
      - include: "#comments"
      - include: "#switch_expr"

  switch_default:
    name: meta.branch.switch-default.bfec
    begin: \s*(default)\s*(:)\s*
    beginCaptures:
      "1":
        name: keyword.control.default.bfec
      "2":
        name: punctuation.type-definition.colon.bfec
    end: \s*(;)
    endCaptures:
      "1":
        name: punctuation.terminator.semicolon.bfec
    patterns:
      - include: "#comments"
      - include: "#switch_expr"
  
  switch_expr:
    patterns:
      - include: "#comments"
      - name: keyword.control.invalid.bfec
        match: \$invalid
      - name: keyword.control.void.bfec
        match: \$void
      - include: "#type_expr"

