
from 'https://bfec.io/bfec/basics/v1.bfec' { bool };

#--
The root of a PNG image

https://www.w3.org/TR/PNG
#--
struct $ {
  # Magic bytes at the start of the file to identify the file as a PNG
  magic_number: "\x89\x50\x4e\x47\x0d\x0a\x1a\x0a";
  # The image header is always the first chunk in a PNG image. It contains
  # general metadata like the image dimensions and compression method
  header: Chunk(ChunkType.IHDR);
  chunks: Chunk[...];
}

struct Chunk(type: ChunkType) {
  # The length of the `data` field (in bytes)
  length: len<u32_be>;
  # Identifies the type of data contained in this chunk
  type: ChunkType = type;
  # The actual chunk data
  data: u8[@.length] -> ChunkData(type);
  # CRC32 checksum of the `data` field for validation
  crc: checksum<u32_be>(@.data, 'crc32');
}

enum ChunkType: ascii<4> {
  IHDR = "IHDR";
  PLTE = "PLTE";
  IDAT = "IDAT";
  IEND = "IEND";
  tRNS = "tRNS";
  cHRM = "cHRM";
  gAMA = "gAMA";
  iCCP = "iCCP";
  sBIT = "sBIT";
  sRGB = "sRGB";
  tEXt = "tEXt";
  xTXt = "xTXt";
  iTXt = "iTXt";
  bKGD = "bKGD";
  hIST = "hIST";
  pHYs = "pHYs";
  sPLT = "sPLT";
  tIME = "tIME";
}

switch ChunkData<ChunkType> {
  case IHDR: ImageHeader;
  case PLTE: Pallete[...];
  case IDAT: void;
  case IEND: void;
  case tRNS: TransparencyData($.header.data.color_type);
  case cHRM: PrimaryChromaticitiesAndWhitePointData;
  case gAMA: GammaData;
  case iCCP: EmbeddedICCProfileData;
  case sBIT: SignifigantBitsData($.header.data.color_type);
  case sRGB: RGBColorSpaceData;
  case tEXt: TextData;
  case xTXt: CompressedTextData;
  case iTXt: InternationalTextData;
  case bKGD: BackgroundColorData($.header.data.color_type);
  case hIST: ImageHistogramData;
  case pHYs: PhysicalPixelDimensionsData;
  case sPLT: SuggestedPalleteData;
  case tIME: LastModifiedTimestampData;
  default: void;
}

enum BitDepth: u8 {
  b1  = 1;
  b2  = 2;
  b4  = 4;
  b8  = 8;
  b16 = 16;
}

enum CompressionMethod: u8 {
  zlib = 0;
}

enum FilterMethod: u8 {
  adaptive = 0;
}

enum InterlaceMethod: u8 {
  no_interlace    = 0;
  adam7_interlace = 1;
}

struct ImageHeader {
  width: u32_be;
  height: u32_be;
  bit_depth: BitDepth;
  color_type: ColorType;
  compression_method: CompressionMethod;
  filter_method: FilterMethod;
  interlace_method: InterlaceMethod;
}

enum ColorType: u8 {
  greyscale            = 0;
  truecolor            = 2;
  indexed_color        = 3;
  greyscale_with_alpha = 4;
  truecolor_with_alpha = 6;
}

struct Pallete {
  red: u8;
  green: u8;
  blue: u8;
}

switch TransparencyData<ColorType> {
  case greyscale: GreyscaleTransparencyData;
  case truecolor: TruecolorTransparencyData;
  case indexed_color: IndexedColorTransparencyData;
  default: invalid;
}

struct GreyscaleTransparencyData {
  grey_sample: u16_be;
}

struct TruecolorTransparencyData {
  red_sample: u16_be;
  green_sample: u16_be;
  blue_sample: u16_be;
}

struct IndexedColorTransparencyData {
  alpha_values: u8[...];
}

struct PrimaryChromaticitiesAndWhitePointData {
  white_point_x: u32_be;
  white_point_y: u32_be;
  red_x: u32_be;
  red_y: u32_be;
  green_x: u32_be;
  green_y: u32_be;
  blue_x: u32_be;
  blue_y: u32_be;
}

struct GammaData {
  image_gamma: u32_be;
}

struct EmbeddedICCProfileData {
  proile_name: ascii<null>;
  compression_method: CompressionMethod;
  compressed_profile: u8[...];
}

switch SignifigantBitsData<ColorType> {
  case greyscale:            GreyscaleSignifigantBitsData;
  case truecolor:            ColorSignifigantBitsData;
  case indexed_color:        ColorSignifigantBitsData;
  case greyscale_with_alpha: GreyscaleSignifigantBitsData;
  case truecolor_with_alpha: ColorSignifigantBitsData;
  default: invalid;
}

struct GreyscaleSignifigantBitsData {
  signifigant_greyscale_bits: u8;
  signifigant_alpha_bits?($.header.data.color_type == ColorType.greysacle_with_alpha): u8;
}

struct ColorSignifigantBitsData {
  signifigant_red_bits: u8;
  signifigant_green_bits: u8;
  signifigant_blue_bits: u8;
  signifigant_alpha_bits?($.header.data.color_type == ColorType.truecolor_with_alpha): u8;
}

enum RGBRenderingIntent: u8 {
  perceptual            = 0;
  relative_colorimetric = 1;
  saturation            = 2;
  absolute_colorimetric = 3;
}

struct RGBColorSpaceData {
  rendering_intent: RGBRenderingIntent;
}

struct TextData {
  keyword: ascii<null>;
  text: ascii<...>;
}

struct CompressedTextData {
  keyword: ascii<null>;
  compression_method: u8;
  compressed_text: u8[...];
}

switch InternationalTextDataBody<bool> {
  case true: u8[...];
  case false: utf8<...>;
}

struct InternationalTextData {
  keyword: ascii<null>;
  compression_flag: bool;
  compression_method: u8;
  language_tag: ascii<null>;
  translated_keyword: u8[null];
  text: InternationalTextDataBody(@.compression_flag);
}

switch BackgroundColorData<ColorType> {
  case greyscale:            GreyscaleBackgroundData;
  case greyscale_with_alpha: GreyscaleBackgroundData;
  case truecolor:            TruecolorBackgroundData;
  case truecolor_with_alpha: TruecolorBackgroundData;
  case indexed_color:        IndexedColorBackgroundData;
  default: invalid;
}

struct GreyscaleBackgroundData {
  greyscale: u16_be;
}

struct TruecolorBackgroundData {
  red: u16_be;
  green: u16_be;
  blue: u16_be;
}

struct IndexedColorBackgroundData {
  pallete_index: u8;
}

struct ImageHistogramData {
  frequencies: u16_be[...];
}

enum PixelDimensionUnit: u8 {
  unknown = 0;
  meter   = 1;
}

struct PhysicalPixelDimensionsData {
  ppu_x: u32_be;
  ppu_y: u32_be;
  unit: PixelDimensionUnit;
}

enum SampleDepth: u8 {
  b8  = 8;
  b16 = 16;
}

struct Sample8Bit {
  red: u8;
  green: u8;
  blue: u8;
  alpha: u8;
}

struct Sample16Bit {
  red: u16_be;
  green: u16_be;
  blue: u16_be;
  alpha: u16_be;
}

switch Sample<SampleDepth> {
  case b8: Sample8Bit;
  case b16: Sample16Bit;
  default: invalid;
}

struct SuggestedPalleteData {
  pallete_name: ascii<null>;
  sample_depth: SampleDepth;
  ...Sample(@.sample_depth);
  frequencies: u16_be[...];
}

struct LastModifiedTimestampData {
  year: u16_be;
  month: u8;
  day: u8;
  hour: u8;
  minute: u8;
  second: u8;
}
